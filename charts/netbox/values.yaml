---
# Default values for netbox.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

replicaCount: 1

image:
  repository: quay.io/netboxcommunity/netbox
  # tag:
  pullPolicy: Always

imagePullSecrets: []
nameOverride: ""
fullnameOverride: ""

service:
  type: ClusterIP
  port: 80

ingress:
  enabled: false
  annotations: {}
    # kubernetes.io/ingress.class: nginx
    # kubernetes.io/tls-acme: "true"
  host: chart-example.local
  # Can also be specified by entering rules directly;
  # rules:
  #   - host: chart-example.local
  #     paths:
  #       - path: /
  #         backend:
  #           serviceName: netbox-example
  #           servicePort: http

  tls: []
  #  - secretName: chart-example-tls
  #    hosts:
  #      - chart-example.local

  ## Set the name of the IngressClass cluster resource (optional)
  ## https://kubernetes.io/docs/reference/kubernetes-api/service-resources/ingress-v1/#IngressSpec
  # className: can-be-anything

postgresql:
  enabled: true
  image:
    repository: bitnamilegacy/postgresql

  auth:
    database: netbox
    username: netbox
    # password: postgres
    ## When defined the `password` field is ignored
    ## Refer to https://github.com/bitnami/charts/blob/d839514d4ea3072a816097493e74cf583d40e3cb/bitnami/postgresql/values.yaml#L143
    # existingSecret: secret-name

  # The following variables are only used when internal PG is disabled
  # postgresqlHost: postgres
  # postgresqlPort: 5432

# For standalone redis, set enabled=false and host to your redis server
redis:
  enabled: true
  image:
    repository: bitnamilegacy/redis

  # host: example.com

  architecture: standalone
  auth:
    enabled: true
    # password: netbox
    # existingSecret:
    # existingSecretPasswordKey:

  master:
    kind: Deployment
    persistence:
      enabled: false
    service:
      port: 6379

# NB; Not specifying a key or existing secret will cause it to regenerate on
# every upgrade
# djangoSecret: ''
# existingDjangoSecret: netbox-django-secret
# existingDjangoSecretKey: secret_key

extraEnv: {}
  # EMAIL_SERVER: localhost
  # EMAIL_PORT: 25
  # EMAIL_USERNAME: netbox
  # EMAIL_TIMEOUT: 5
  # EMAIL_FROM: netbox@example.com
  # MAX_PAGE_SIZE: 1000
  # WEBHOOKS_ENABLED: true

extraEnvFrom: []
  # - configMapRef:
  #     name: custom-config
  # - secretRef:
  #     name: custom-secrets

extraSecrets: {}
  # EMAIL_PASSWORD: netbox

# Ends up stored as extra.py in the netbox configuration, must be valid Python
extraConfiguration: ''

# Will be stored in plugins.py in the netbox configuration, requires
# using/building a netbox image containing the required plugins, must be valid
# Python
#
# https://github.com/netbox-community/netbox-docker/wiki/Using-Netbox-Plugins
extraPlugins: ''
  # PLUGINS = ["netbox_bgp"]
  #
  # PLUGINS_CONFIG = {
  #   "netbox_bgp": {
  #     ADD YOUR SETTINGS HERE
  #   }
  # }

superuser:
  name: ''
  email: ''
  apiToken: ''
  password: ''

resources: {}
  # limits:
  #   cpu: 500m
  #   memory: 512Mi
  # requests:
  #   cpu: 500m
  #   memory: 512Mi

nodeSelector: {}

tolerations: []

affinity: {}

extraVolumes: []

extraVolumeMounts: []

## Note that enabling features like LOGIN_REQUIRED or auto-SSO login may
## require using different probe URLs
readinessProbe:
  httpGet:
    port: http
    path: /

livenessProbe:
  httpGet:
    port: http
    path: /

startupProbe:
  tcpSocket:
    port: http
  failureThreshold: 12

persistence:
  enabled: false
  # existingClaim: netbox-data
  # storageClass: "-"
  accessMode: ReadWriteOnce
  size: 10Gi

worker:
  enabled: true

  #extraVolumes: []
  #extraVolumeMounts: []

  replicaCount: 1

  resources: {}
    # limits:
    #   cpu: 100m
    #   memory: 150Mi
    # requests:
    #   cpu: 100m
    #   memory: 150Mi

  nodeSelector: {}

  tolerations: []

  affinity: {}
