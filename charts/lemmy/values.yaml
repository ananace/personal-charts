---
image:
  repository: docker.io/dessalines/lemmy
  pullPolicy: IfNotPresent
  ## Overrides the image tag whose default is the chart appVersion.
  # tag: latest

## The domain of the Lemmy instance
serverName: "localhost"

smtp:
  server: "smtp.example.com:25"
  # username: lemmy
  # password:
  from: lemmy@example.com
  tls: none

admin:
  username: lemmy
  ## Will be generated on first install if left empty
  # password:
  email: lemmy@example.com

  ## Password can also be provided using an existing secret, note that the value
  ## is only updated on helm upgrades due to Lemmy's configuration system
  # existingSecret: ""
  existingSecretKey: password

config:
  siteName: Lemmy on Kubernetes
  ## Requires valid certificates, but is also required for federation support
  tls: true
  ## To which degree should pict-rs cache external resources
  ## Valid modes are; None, StoreLinkPreviews, and ProxyAllImages
  imageMode: StoreLinkPreviews

## Extra configuration to merge into the main lemmy.hjson file
extraConfig: {}
  # opentelemetry_url: http://otel:4137

imagePullSecrets: []
nameOverride: ""
fullnameOverride: ""

serviceAccount:
  # Specifies whether a service account should be created
  create: false
  # Annotations to add to the service account
  annotations: {}
  # The name of the service account to use.
  # If not set and create is true, a name is generated using the fullname template
  name: ""

backend:
  image:
    _keep: true
    # repository: docker.io/dessalines/lemmy
    # pullPolicy: IfNotPresent
    # tag:

  env:
    # RUST_BACKTRACE: 1

  envFrom:
    # - secretRef:
    #    name: my-extra-secrets

  replicaCount: 1

  strategy:
    type: RollingUpdate

  livenessProbe:
    httpGet:
      path: /
      port: http

  readinessProbe:
    httpGet:
      path: /
      port: http

  startupProbe:
    httpGet:
      path: /
      port: http

  podAnnotations: {}

  podSecurityContext: {}
    # fsGroup: 2000

  securityContext: {}
    # capabilities:
    #   drop:
    #   - ALL
    # readOnlyRootFilesystem: true
    # runAsNonRoot: true
    # runAsUser: 1000

  service:
    type: ClusterIP
    port: 80

  resources: {}
    # limits:
    #   cpu: 100m
    #   memory: 128Mi
    # requests:
    #   cpu: 100m
    #   memory: 128Mi

  nodeSelector: {}

  tolerations: []

  affinity: {}

taskrunner:
  enabled: false

  image:
    _keep: true
    # repository: docker.io/dessalines/lemmy
    # pullPolicy: IfNotPresent
    # tag:

  env:
    # RUST_BACKTRACE: 1

  envFrom:
    # - secretRef:
    #    name: my-extra-secrets

  podAnnotations: {}

  podSecurityContext: {}
    # fsGroup: 2000

  securityContext: {}
    # capabilities:
    #   drop:
    #   - ALL
    # readOnlyRootFilesystem: true
    # runAsNonRoot: true
    # runAsUser: 1000

  resources: {}
    # limits:
    #   cpu: 100m
    #   memory: 128Mi
    # requests:
    #   cpu: 100m
    #   memory: 128Mi

  nodeSelector: {}

  tolerations: []

  affinity: {}

federationsender:
  enabled: false

  image:
    _keep: true
    # repository: docker.io/dessalines/lemmy
    # pullPolicy: IfNotPresent
    # tag:

  env:
    # RUST_BACKTRACE: 1

  envFrom:
    # - secretRef:
    #    name: my-extra-secrets

  podAnnotations: {}

  podSecurityContext: {}
    # fsGroup: 2000

  securityContext: {}
    # capabilities:
    #   drop:
    #   - ALL
    # readOnlyRootFilesystem: true
    # runAsNonRoot: true
    # runAsUser: 1000

  resources: {}
    # limits:
    #   cpu: 100m
    #   memory: 128Mi
    # requests:
    #   cpu: 100m
    #   memory: 128Mi

  nodeSelector: {}

  tolerations: []

  affinity: {}

frontend:
  image:
    repository: docker.io/dessalines/lemmy-ui
    # pullPolicy: IfNotPresent
    # tag:

  replicaCount: 1

  strategy:
    type: RollingUpdate

  env:
    # LEMMY_UI_DEBUG: true

  envFrom:
    # - secretRef:
    #    name: my-extra-secrets

  livenessProbe:
    httpGet:
      path: /robots.txt
      port: http

  readinessProbe:
    httpGet:
      path: /robots.txt
      port: http

  # startupProbe:
  #   httpGet:
  #     path: /robots.txt
  #     port: http

  podAnnotations: {}

  podSecurityContext: {}
    # fsGroup: 2000

  securityContext: {}
    # capabilities:
    #   drop:
    #   - ALL
    # readOnlyRootFilesystem: true
    # runAsNonRoot: true
    # runAsUser: 1000

  service:
    type: ClusterIP
    port: 80
    sessionAffinity: ClientIP

  resources: {}
    # limits:
    #   cpu: 100m
    #   memory: 128Mi
    # requests:
    #   cpu: 100m
    #   memory: 128Mi

  nodeSelector: {}

  tolerations: []

  affinity: {}

pictrs:
  ## NB: pict-rs uses a Sled database by default, which can only be opened by a single instance
  replicaCount: 1

  strategy:
    type: Recreate

  ## Generated on first install if left empty
  # apiKey:

  ## Can also be provided using an existing secret, note that the value is only
  ## updated on helm upgrades due to Lemmy's configuration system
  # existingSecret: ""
  existingSecretKey: apikey

  storage:
    ## Storage method for media, can be filesystem or object_storage
    method: filesystem

    objectStorage:
      ## For self-hosted S3, note that region _must_ also be provided, even for self-hosted S3
      # endpoint: https://minio.example.com
      usePathStyle: false

      bucketName: lemmy-pictrs
      # region:
      # accessKey:
      # secretKey:
      # sessionToken:

      # existingSecret: pictrs-secret
      # existingSecretAccessKey: access-key
      # existingSecretSecretKey: secret-key

  env:
    PICTRS__MEDIA__VIDEO_CODEC: vp9
    PICTRS__MEDIA__GIF__MAX_WIDTH: 256
    PICTRS__MEDIA__GIF__MAX_HEIGHT: 256
    PICTRS__MEDIA__GIF__MAX_AREA: 65536
    PICTRS__MEDIA__GIF__MAX_FRAME_COUNT: 400

  envFrom:
    # - secretRef:
    #    name: my-extra-secrets

  image:
    repository: docker.io/asonix/pictrs
    pullPolicy: IfNotPresent
    tag: 0.4.0-beta.19

  ## Used by both the sled database and also media itself if using the filesystem storage method
  persistence:
    enabled: true
    accessMode: ReadWriteOnce
    size: 16Gi
    # existingClaim:
    # storageClass:

  livenessProbe:
    httpGet:
      path: /healthz
      port: http

  readinessProbe:
    httpGet:
      path: /healthz
      port: http

  startupProbe:
    httpGet:
      path: /healthz
      port: http

  podAnnotations: {}

  podSecurityContext: {}
    # fsGroup: 2000

  securityContext: {}
    # capabilities:
    #   drop:
    #   - ALL
    # readOnlyRootFilesystem: true
    # runAsNonRoot: true
    # runAsUser: 1000

  service:
    type: ClusterIP
    port: 80

  resources: {}
    # limits:
    #   cpu: 100m
    #   memory: 128Mi
    # requests:
    #   cpu: 100m
    #   memory: 128Mi

  nodeSelector: {}

  tolerations: []

  affinity: {}

proxy:
  enabled: true
  replicaCount: 1

  strategy:
    type: RollingUpdate

  image:
    repository: nginx
    pullPolicy: Always
    tag: 1-alpine

  livenessProbe:
    httpGet:
      path: /
      port: http

  readinessProbe:
    httpGet:
      path: /
      port: http

  podAnnotations: {}

  podSecurityContext: {}
    # fsGroup: 2000

  securityContext: {}
    # capabilities:
    #   drop:
    #   - ALL
    # readOnlyRootFilesystem: true
    # runAsNonRoot: true
    # runAsUser: 1000

  service:
    type: ClusterIP
    port: 80

  resources: {}
    # limits:
    #   cpu: 100m
    #   memory: 128Mi
    # requests:
    #   cpu: 100m
    #   memory: 128Mi

  nodeSelector: {}

  tolerations: []

  affinity: {}

postgresql:
  enabled: true
  # host:

  poolSize: 10

  auth:
    username: lemmy
    database: lemmy
    # password:

  service:
    port: 5432

  ## This may need to be set to 'require' if your PostgreSQL database forbids unencrypted connections
  # sslmode: prefer

ingress:
  enabled: true
  className: ""
  annotations: {}
    # kubernetes.io/ingress.class: nginx
    # kubernetes.io/tls-acme: "true"
  hosts:
    # - chart-example.local
  tls: []
  #  - secretName: chart-example-tls
  #    hosts:
  #      - chart-example.local
